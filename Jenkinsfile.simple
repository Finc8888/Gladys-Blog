pipeline {
    agent any

    environment {
        IMAGE_NAME = "gladys-blog"
        IMAGE_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = "gladys-blog-container"
        SERVER_HOST = "${params.SERVER_HOST ?: 'localhost'}"
        SERVER_USER = "${params.SERVER_USER ?: 'deploy'}"
        ENVIRONMENT = "${params.ENVIRONMENT ?: 'production'}"
    }

    parameters {
        string(name: 'SERVER_HOST', defaultValue: 'localhost', description: 'Server host for deployment')
        string(name: 'SERVER_USER', defaultValue: 'deploy', description: 'SSH user for deployment')
        choice(name: 'ENVIRONMENT', choices: ['production', 'staging'], description: 'Deployment environment')
        booleanParam(name: 'SKIP_BUILD_TEST', defaultValue: false, description: 'Skip build testing')
        booleanParam(name: 'FORCE_DEPLOY', defaultValue: false, description: 'Force deployment even if tests fail')
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out code..."
                checkout scm
                
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_COMMIT_MSG = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                }
                
                echo "üìù Commit: ${env.GIT_COMMIT_SHORT}"
                echo "üí¨ Message: ${env.GIT_COMMIT_MSG}"
            }
        }

        stage('Validate Files') {
            steps {
                echo "üîç Validating required files..."
                
                script {
                    def requiredFiles = [
                        'blog/hugo.toml',
                        'blog/content',
                        'deploy/Dockerfile.prod.ssl',
                        'deploy/ssl-deploy.sh',
                        'docker-compose.ssl.yaml'
                    ]
                    
                    requiredFiles.each { file ->
                        if (!fileExists(file)) {
                            error("Required file not found: ${file}")
                        }
                        echo "‚úÖ Found: ${file}"
                    }
                }
            }
        }

        stage('Test Build') {
            steps {
                script {
                    if (params.SKIP_BUILD_TEST) {
                        echo "‚è≠Ô∏è Skipping build test as requested"
                        return
                    }
                    
                    echo "üß™ Testing Docker build..."
                    
                    try {
                        sh """
                            docker build -f deploy/Dockerfile.prod.ssl -t ${IMAGE_NAME}-test:${BUILD_NUMBER} .
                            echo "‚úÖ Docker build successful"
                        """
                    } catch (Exception e) {
                        echo "‚ùå SSL build failed, trying simple build..."
                        sh """
                            docker build -f deploy/Dockerfile.prod.simple -t ${IMAGE_NAME}-test:${BUILD_NUMBER} .
                            echo "‚úÖ Simple Docker build successful"
                        """
                    }
                    
                    // Clean up test image
                    sh "docker rmi ${IMAGE_NAME}-test:${BUILD_NUMBER} || true"
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                echo "üöÄ Deploying to ${SERVER_HOST} (${ENVIRONMENT})..."
                
                script {
                    try {
                        sshagent(['ssh-deploy-key']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} '
                                    set -e
                                    echo "üì¶ Updating code on server..."
                                    
                                    # Navigate to project directory
                                    cd /home/${SERVER_USER}/Gladys-Blog || {
                                        echo "‚ùå Project directory not found"
                                        exit 1
                                    }
                                    
                                    # Pull latest changes
                                    git pull origin main
                                    
                                    # Make scripts executable
                                    chmod +x deploy/*.sh
                                    
                                    # Apply Hugo fixes if needed
                                    if [ -f deploy/fix-hugo-build.sh ]; then
                                        echo "üîß Applying Hugo build fixes..."
                                        ./deploy/fix-hugo-build.sh --fix-all || echo "‚ö†Ô∏è Some fixes failed, continuing..."
                                    fi
                                    
                                    # Deploy with SSL
                                    echo "üîê Starting SSL deployment..."
                                    ./deploy/ssl-deploy.sh prod
                                    
                                    # Verify deployment
                                    echo "‚úÖ Deployment completed, checking status..."
                                    ./deploy/ssl-deploy.sh status
                                '
                            """
                        }
                        
                        echo "‚úÖ Deployment successful!"
                        
                    } catch (Exception e) {
                        echo "‚ùå Deployment failed: ${e.message}"
                        
                        if (!params.FORCE_DEPLOY) {
                            throw e
                        } else {
                            echo "‚ö†Ô∏è Continuing despite failure due to FORCE_DEPLOY=true"
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                echo "üîç Verifying deployment..."
                
                script {
                    try {
                        sshagent(['ssh-deploy-key']) {
                            def healthCheck = sh(
                                script: """
                                    ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} '
                                        cd /home/${SERVER_USER}/Gladys-Blog
                                        ./deploy/ssl-deploy.sh health
                                    '
                                """,
                                returnStatus: true
                            )
                            
                            if (healthCheck == 0) {
                                echo "‚úÖ Health check passed!"
                            } else {
                                echo "‚ö†Ô∏è Health check failed, but deployment may still be working"
                            }
                        }
                        
                        // Additional verification
                        sleep(time: 30, unit: 'SECONDS')
                        
                        def httpCheck = sh(
                            script: "curl -f -k --max-time 10 https://${SERVER_HOST}/health || curl -f --max-time 10 http://${SERVER_HOST}/health",
                            returnStatus: true
                        )
                        
                        if (httpCheck == 0) {
                            echo "‚úÖ HTTP health check passed!"
                        } else {
                            echo "‚ö†Ô∏è HTTP health check failed - site may need more time to start"
                        }
                        
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Verification failed: ${e.message}"
                        echo "üìù This doesn't necessarily mean deployment failed"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up..."
            
            script {
                // Clean up any test containers or images
                sh """
                    docker container prune -f || true
                    docker image prune -f || true
                """
            }
        }
        
        success {
            echo "üéâ Pipeline completed successfully!"
            
            script {
                try {
                    slackSend(
                        color: 'good',
                        message: """
‚úÖ *Gladys Blog Deployment Successful*
‚Ä¢ Environment: ${ENVIRONMENT}
‚Ä¢ Server: ${SERVER_HOST}
‚Ä¢ Commit: ${env.GIT_COMMIT_SHORT}
‚Ä¢ Message: ${env.GIT_COMMIT_MSG}
‚Ä¢ Build: #${BUILD_NUMBER}
                        """.trim()
                    )
                } catch (Exception e) {
                    echo "üì¢ Slack notification failed: ${e.message}"
                }
                
                // Send email notification (if configured)
                try {
                    emailext(
                        subject: "‚úÖ Gladys Blog Deployment Successful - Build #${BUILD_NUMBER}",
                        body: """
Deployment completed successfully!

Environment: ${ENVIRONMENT}
Server: ${SERVER_HOST}  
Commit: ${env.GIT_COMMIT_SHORT}
Message: ${env.GIT_COMMIT_MSG}

You can check the site at: https://${SERVER_HOST}
                        """,
                        to: '${DEFAULT_RECIPIENTS}',
                        mimeType: 'text/plain'
                    )
                } catch (Exception e) {
                    echo "üìß Email notification failed: ${e.message}"
                }
            }
        }
        
        failure {
            echo "üí• Pipeline failed!"
            
            script {
                try {
                    slackSend(
                        color: 'danger',
                        message: """
‚ùå *Gladys Blog Deployment Failed*
‚Ä¢ Environment: ${ENVIRONMENT}
‚Ä¢ Server: ${SERVER_HOST}
‚Ä¢ Commit: ${env.GIT_COMMIT_SHORT}
‚Ä¢ Build: #${BUILD_NUMBER}
‚Ä¢ Check: ${BUILD_URL}console
                        """.trim()
                    )
                } catch (Exception e) {
                    echo "üì¢ Slack notification failed: ${e.message}"
                }
                
                try {
                    emailext(
                        subject: "‚ùå Gladys Blog Deployment Failed - Build #${BUILD_NUMBER}",
                        body: """
Deployment failed!

Environment: ${ENVIRONMENT}
Server: ${SERVER_HOST}
Commit: ${env.GIT_COMMIT_SHORT}

Check the console output: ${BUILD_URL}console
                        """,
                        to: '${DEFAULT_RECIPIENTS}',
                        mimeType: 'text/plain'
                    )
                } catch (Exception e) {
                    echo "üìß Email notification failed: ${e.message}"
                }
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings"
        }
    }
}