# Multi-stage Dockerfile for production-ready Hugo blog with SSL support
FROM alpine:latest as hugo-builder

# Install Hugo
WORKDIR /src
RUN apk add --no-cache \
    --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community \
    hugo \
    git \
    && rm -rf /var/cache/apk/*

# Copy blog source files
COPY blog/ ./

# Initialize git repository and handle submodules
RUN git init && \
    git config user.email "docker@gladys-blog.com" && \
    git config user.name "Docker Build" && \
    git add . && \
    git commit -m "Initial commit for Docker build" || true

# Handle theme submodule - clone if missing
RUN if [ ! -d "themes/archie" ] || [ ! -f "themes/archie/theme.toml" ]; then \
        echo "Theme missing, cloning archie theme..." && \
        rm -rf themes/archie && \
        git clone https://github.com/athul/archie.git themes/archie || \
        echo "Failed to clone theme, will create fallback layouts"; \
    fi

# Create fallback layouts if theme is still missing or broken
RUN mkdir -p layouts/_default && \
    if [ ! -f "themes/archie/layouts/index.html" ] && [ ! -f "layouts/index.html" ]; then \
        echo "Creating fallback index layout..." && \
        cat > layouts/index.html << 'EOF'
<!DOCTYPE html>
<html lang="{{ .Site.LanguageCode | default "en" }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .Site.Title }}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }
        .header { border-bottom: 1px solid #eee; margin-bottom: 30px; padding-bottom: 20px; }
        .post { margin-bottom: 30px; padding: 20px; border-left: 4px solid #007acc; }
        .post h2 { margin-top: 0; }
        .post a { color: #007acc; text-decoration: none; }
        .post a:hover { text-decoration: underline; }
        .meta { color: #666; font-size: 0.9em; margin-bottom: 10px; }
        .nav { margin: 20px 0; }
        .nav a { margin-right: 20px; color: #007acc; text-decoration: none; }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{ .Site.Title }}</h1>
        <p>{{ .Site.Params.subtitle }}</p>
        <div class="nav">
            <a href="/">Главная</a>
            <a href="/posts">Все посты</a>
            <a href="/about">О блоге</a>
            <a href="/tags">Теги</a>
        </div>
    </div>
    <main>
        {{ $pages := where .Site.RegularPages "Type" "posts" }}
        {{ range first 10 $pages }}
        <article class="post">
            <h2><a href="{{ .Permalink }}">{{ .Title }}</a></h2>
            <div class="meta">
                {{ if .Date }}{{ .Date.Format "2006-01-02" }}{{ end }}
                {{ if .Params.tags }}| Теги: {{ range .Params.tags }}{{ . }} {{ end }}{{ end }}
            </div>
            <p>{{ .Summary }}</p>
            <a href="{{ .Permalink }}">Читать далее...</a>
        </article>
        {{ end }}
    </main>
</body>
</html>
EOF
    fi && \
    if [ ! -f "themes/archie/layouts/_default/single.html" ] && [ ! -f "layouts/_default/single.html" ]; then \
        echo "Creating fallback single layout..." && \
        cat > layouts/_default/single.html << 'EOF'
<!DOCTYPE html>
<html lang="{{ .Site.LanguageCode | default "en" }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .Title }} - {{ .Site.Title }}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }
        .header { border-bottom: 1px solid #eee; margin-bottom: 30px; padding-bottom: 20px; }
        .nav { margin: 20px 0; }
        .nav a { margin-right: 20px; color: #007acc; text-decoration: none; }
        .meta { color: #666; margin-bottom: 20px; }
        .content { margin-top: 30px; }
    </style>
</head>
<body>
    <div class="header">
        <h1><a href="/" style="text-decoration: none; color: inherit;">{{ .Site.Title }}</a></h1>
        <div class="nav">
            <a href="/">Главная</a>
            <a href="/posts">Все посты</a>
            <a href="/about">О блоге</a>
            <a href="/tags">Теги</a>
        </div>
    </div>
    <main>
        <article>
            <h1>{{ .Title }}</h1>
            <div class="meta">
                {{ if .Date }}Опубликовано: {{ .Date.Format "2006-01-02" }}{{ end }}
                {{ if .Params.tags }}| Теги: {{ range .Params.tags }}{{ . }} {{ end }}{{ end }}
            </div>
            <div class="content">
                {{ .Content }}
            </div>
        </article>
    </main>
</body>
</html>
EOF
    fi

# Validate Hugo configuration and theme
RUN hugo version && \
    echo "=== Hugo Config ===" && \
    hugo config && \
    echo "=== Directory Structure ===" && \
    ls -la && \
    echo "=== Theme Check ===" && \
    ls -la themes/ || echo "No themes directory" && \
    ls -la themes/archie/ || echo "No archie theme" && \
    echo "=== Layout Check ===" && \
    find . -name "*.html" -path "*/layouts/*" || echo "No layout files found"

# Build static site with optimizations and debugging
RUN echo "=== Starting Hugo Build ===" && \
    hugo \
    --minify \
    --destination /dist \
    --baseURL "/" \
    --cleanDestinationDir \
    --gc \
    --ignoreCache \
    --verbose \
    --debug || \
    (echo "=== Hugo Build Failed, trying without minify ===" && \
     hugo \
     --destination /dist \
     --baseURL "/" \
     --cleanDestinationDir \
     --verbose)

# Verify that the site was built successfully
RUN echo "=== Build Output Contents ===" && \
    ls -la /dist && \
    echo "=== Checking for index.html ===" && \
    if [ ! -f /dist/index.html ]; then \
        echo "WARNING: index.html not found, checking for alternatives..." && \
        find /dist -name "*.html" -type f && \
        echo "=== Creating fallback index.html ===" && \
        cat > /dist/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Gladys Blog</title>
    <meta http-equiv="refresh" content="0; url=/posts/">
    <style>body{font-family:sans-serif;text-align:center;padding:50px;}</style>
</head>
<body>
    <h1>Gladys Blog</h1>
    <p>Redirecting to posts...</p>
    <p><a href="/posts/">Click here if not redirected</a></p>
</body>
</html>
EOF
        echo "Fallback index.html created"; \
    else \
        echo "SUCCESS: index.html found!"; \
    fi

# Production image with Nginx and SSL support
FROM nginx:alpine

# Metadata
LABEL maintainer="gladys-blog" \
      version="1.0-ssl" \
      description="Production Hugo blog with Nginx and SSL support"

# Install additional packages for SSL and monitoring
RUN apk add --no-cache \
    curl \
    bash \
    certbot \
    certbot-nginx \
    openssl \
    && rm -rf /var/cache/apk/*

# Create user for nginx (security)
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-app -g nginx-app nginx-app

# Copy built site
COPY --from=hugo-builder /dist /usr/share/nginx/html

# Copy SSL-enabled Nginx configuration
COPY deploy/nginx-ssl.conf /etc/nginx/nginx.conf

# Generate DH parameters for additional security
RUN openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp \
             /var/log/nginx \
             /var/www/certbot \
             /etc/letsencrypt \
             /var/lib/letsencrypt && \
    chown -R nginx-app:nginx-app /var/cache/nginx \
                                 /var/log/nginx \
                                 /usr/share/nginx/html \
                                 /var/www/certbot && \
    chmod -R 755 /usr/share/nginx/html \
                 /var/www/certbot && \
    chmod 644 /etc/ssl/certs/dhparam.pem

# Optimize static files (if present)
RUN find /usr/share/nginx/html -type f -name "*.html" -exec gzip -9 -c {} \; > {}.gz 2>/dev/null || true && \
    find /usr/share/nginx/html -type f -name "*.css" -exec gzip -9 -c {} \; > {}.gz 2>/dev/null || true && \
    find /usr/share/nginx/html -type f -name "*.js" -exec gzip -9 -c {} \; > {}.gz 2>/dev/null || true

# Copy SSL entrypoint script
COPY deploy/entrypoint-ssl.sh /docker-entrypoint.sh

# Set permissions for entrypoint script
RUN chmod +x /docker-entrypoint.sh

# Health check (using HTTPS)
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f -k https://localhost/health || curl -f http://localhost/health || exit 1

# Security: expose both HTTP (for redirect) and HTTPS ports
EXPOSE 80 443

# Environment variables
ENV NGINX_WORKER_PROCESSES=auto \
    NGINX_WORKER_CONNECTIONS=1024 \
    NGINX_KEEPALIVE_TIMEOUT=65 \
    DOMAIN=localhost \
    EMAIL=admin@localhost

# Volume for SSL certificates
VOLUME ["/etc/letsencrypt", "/var/www/certbot"]

# Use unprivileged user (will be changed in entrypoint for certbot operations)
USER root

# Entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]

# Default command
CMD ["nginx", "-g", "daemon off;"]

# Add OCI metadata
LABEL org.opencontainers.image.title="Gladys Blog SSL" \
      org.opencontainers.image.description="Production-ready Hugo blog with Nginx and SSL support" \
      org.opencontainers.image.vendor="Gladys Blog" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/your-repo/gladys-blog" \
      org.opencontainers.image.documentation="https://github.com/your-repo/gladys-blog/README.md"